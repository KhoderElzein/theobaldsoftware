// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package test_customers.get_sapdata_via_http_regex_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_2
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: get_sapdata_via_http_regex Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class get_sapdata_via_http_regex implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "get_sapdata_via_http_regex";
	private final String projectName = "TEST_CUSTOMERS";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					get_sapdata_via_http_regex.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(get_sapdata_via_http_regex.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tHttpRequest_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHttpRequest_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tNormalize_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHttpRequest_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractRegexFields_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHttpRequest_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHttpRequest_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHttpRequest_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row21Struct implements
			routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_TEST_CUSTOMERS_get_sapdata_via_http_regex = new byte[0];
		static byte[] commonByteArray_TEST_CUSTOMERS_get_sapdata_via_http_regex = new byte[0];

		public String SAP_Client_MANDT;

		public String getSAP_Client_MANDT() {
			return this.SAP_Client_MANDT;
		}

		public String Customer_KUNNR;

		public String getCustomer_KUNNR() {
			return this.Customer_KUNNR;
		}

		public String Country_Customer_LAND1;

		public String getCountry_Customer_LAND1() {
			return this.Country_Customer_LAND1;
		}

		public String Country_Name_NAME1;

		public String getCountry_Name_NAME1() {
			return this.Country_Name_NAME1;
		}

		public String City_Customer_ORT01;

		public String getCity_Customer_ORT01() {
			return this.City_Customer_ORT01;
		}

		public String Region_Customer_REGIO;

		public String getRegion_Customer_REGIO() {
			return this.Region_Customer_REGIO;
		}

		public String Account_Group_Customer_KTOKD;

		public String getAccount_Group_Customer_KTOKD() {
			return this.Account_Group_Customer_KTOKD;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TEST_CUSTOMERS_get_sapdata_via_http_regex.length) {
					if (length < 1024
							&& commonByteArray_TEST_CUSTOMERS_get_sapdata_via_http_regex.length == 0) {
						commonByteArray_TEST_CUSTOMERS_get_sapdata_via_http_regex = new byte[1024];
					} else {
						commonByteArray_TEST_CUSTOMERS_get_sapdata_via_http_regex = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TEST_CUSTOMERS_get_sapdata_via_http_regex,
						0, length);
				strReturn = new String(
						commonByteArray_TEST_CUSTOMERS_get_sapdata_via_http_regex,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TEST_CUSTOMERS_get_sapdata_via_http_regex) {

				try {

					int length = 0;

					this.SAP_Client_MANDT = readString(dis);

					this.Customer_KUNNR = readString(dis);

					this.Country_Customer_LAND1 = readString(dis);

					this.Country_Name_NAME1 = readString(dis);

					this.City_Customer_ORT01 = readString(dis);

					this.Region_Customer_REGIO = readString(dis);

					this.Account_Group_Customer_KTOKD = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SAP_Client_MANDT, dos);

				// String

				writeString(this.Customer_KUNNR, dos);

				// String

				writeString(this.Country_Customer_LAND1, dos);

				// String

				writeString(this.Country_Name_NAME1, dos);

				// String

				writeString(this.City_Customer_ORT01, dos);

				// String

				writeString(this.Region_Customer_REGIO, dos);

				// String

				writeString(this.Account_Group_Customer_KTOKD, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SAP_Client_MANDT=" + SAP_Client_MANDT);
			sb.append(",Customer_KUNNR=" + Customer_KUNNR);
			sb.append(",Country_Customer_LAND1=" + Country_Customer_LAND1);
			sb.append(",Country_Name_NAME1=" + Country_Name_NAME1);
			sb.append(",City_Customer_ORT01=" + City_Customer_ORT01);
			sb.append(",Region_Customer_REGIO=" + Region_Customer_REGIO);
			sb.append(",Account_Group_Customer_KTOKD="
					+ Account_Group_Customer_KTOKD);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_TEST_CUSTOMERS_get_sapdata_via_http_regex = new byte[0];
		static byte[] commonByteArray_TEST_CUSTOMERS_get_sapdata_via_http_regex = new byte[0];

		public String ResponseContent;

		public String getResponseContent() {
			return this.ResponseContent;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TEST_CUSTOMERS_get_sapdata_via_http_regex.length) {
					if (length < 1024
							&& commonByteArray_TEST_CUSTOMERS_get_sapdata_via_http_regex.length == 0) {
						commonByteArray_TEST_CUSTOMERS_get_sapdata_via_http_regex = new byte[1024];
					} else {
						commonByteArray_TEST_CUSTOMERS_get_sapdata_via_http_regex = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TEST_CUSTOMERS_get_sapdata_via_http_regex,
						0, length);
				strReturn = new String(
						commonByteArray_TEST_CUSTOMERS_get_sapdata_via_http_regex,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TEST_CUSTOMERS_get_sapdata_via_http_regex) {

				try {

					int length = 0;

					this.ResponseContent = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ResponseContent, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ResponseContent=" + ResponseContent);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_TEST_CUSTOMERS_get_sapdata_via_http_regex = new byte[0];
		static byte[] commonByteArray_TEST_CUSTOMERS_get_sapdata_via_http_regex = new byte[0];

		public String ResponseContent;

		public String getResponseContent() {
			return this.ResponseContent;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TEST_CUSTOMERS_get_sapdata_via_http_regex.length) {
					if (length < 1024
							&& commonByteArray_TEST_CUSTOMERS_get_sapdata_via_http_regex.length == 0) {
						commonByteArray_TEST_CUSTOMERS_get_sapdata_via_http_regex = new byte[1024];
					} else {
						commonByteArray_TEST_CUSTOMERS_get_sapdata_via_http_regex = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TEST_CUSTOMERS_get_sapdata_via_http_regex,
						0, length);
				strReturn = new String(
						commonByteArray_TEST_CUSTOMERS_get_sapdata_via_http_regex,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TEST_CUSTOMERS_get_sapdata_via_http_regex) {

				try {

					int length = 0;

					this.ResponseContent = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ResponseContent, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ResponseContent=" + ResponseContent);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHttpRequest_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tHttpRequest_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();
				row21Struct row21 = new row21Struct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row21" + iterateId, 0,
								0);

					}
				}

				int tos_count_tDBOutput_1 = 0;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;
				String dbschema_tDBOutput_1 = null;
				String tableName_tDBOutput_1 = null;
				boolean whetherReject_tDBOutput_1 = false;

				java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar
						.getInstance();
				long year1_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd",
						"0001-01-01").getTime();
				long year2_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd",
						"1753-01-01").getTime();
				long year10000_tDBOutput_1 = TalendDate.parseDate(
						"yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00").getTime();
				long date_tDBOutput_1;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_1 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = "dbo";
				String driverClass_tDBOutput_1 = "net.sourceforge.jtds.jdbc.Driver";

				java.lang.Class.forName(driverClass_tDBOutput_1);
				String port_tDBOutput_1 = "1433";
				String dbname_tDBOutput_1 = "sap_tos";
				String url_tDBOutput_1 = "jdbc:jtds:sqlserver://" + "localhost";
				if (!"".equals(port_tDBOutput_1)) {
					url_tDBOutput_1 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBOutput_1)) {
					url_tDBOutput_1 += "//" + "sap_tos";

				}
				url_tDBOutput_1 += ";appName=" + projectName + ";" + "";
				dbUser_tDBOutput_1 = "test";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("f3e656537b1a4d67");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(
						url_tDBOutput_1, dbUser_tDBOutput_1, dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);

				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int batchSize_tDBOutput_1 = 100000;
				int batchSizeCounter_tDBOutput_1 = 0;

				if (dbschema_tDBOutput_1 == null
						|| dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = "customers2";
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "].["
							+ "customers2";
				}
				int count_tDBOutput_1 = 0;

				boolean whetherExist_tDBOutput_1 = false;
				try (java.sql.Statement isExistStmt_tDBOutput_1 = conn_tDBOutput_1
						.createStatement()) {
					try {
						isExistStmt_tDBOutput_1.execute("SELECT TOP 1 1 FROM ["
								+ tableName_tDBOutput_1 + "]");
						whetherExist_tDBOutput_1 = true;
					} catch (java.lang.Exception e) {
						whetherExist_tDBOutput_1 = false;
					}
				}
				if (whetherExist_tDBOutput_1) {
					try (java.sql.Statement stmtDrop_tDBOutput_1 = conn_tDBOutput_1
							.createStatement()) {
						stmtDrop_tDBOutput_1.execute("DROP TABLE ["
								+ tableName_tDBOutput_1 + "]");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1
						.createStatement()) {
					stmtCreate_tDBOutput_1
							.execute("CREATE TABLE ["
									+ tableName_tDBOutput_1
									+ "]([SAP_Client_MANDT] NVARCHAR(3)  ,[Customer_KUNNR] NVARCHAR(10)  ,[Country_Customer_LAND1] NVARCHAR(3)  ,[Country_Name_NAME1] NVARCHAR(35)  ,[City_Customer_ORT01] NVARCHAR(35)  ,[Region_Customer_REGIO] NVARCHAR(3)  ,[Account_Group_Customer_KTOKD] NVARCHAR(4)  )");
				}
				String insert_tDBOutput_1 = "INSERT INTO ["
						+ tableName_tDBOutput_1
						+ "] ([SAP_Client_MANDT],[Customer_KUNNR],[Country_Customer_LAND1],[Country_Name_NAME1],[City_Customer_ORT01],[Region_Customer_REGIO],[Account_Group_Customer_KTOKD]) VALUES (?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tExtractRegexFields_1 begin ] start
				 */

				ok_Hash.put("tExtractRegexFields_1", false);
				start_Hash.put("tExtractRegexFields_1",
						System.currentTimeMillis());

				currentComponent = "tExtractRegexFields_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tExtractRegexFields_1 = 0;

				java.util.regex.Pattern pattern_tExtractRegexFields_1 = java.util.regex.Pattern
						.compile("\\s*,\\s*(?=(?:(?:[^\"]*\"){2})*[^\"]*$)");

				/**
				 * [tExtractRegexFields_1 begin ] stop
				 */

				/**
				 * [tNormalize_1 begin ] start
				 */

				ok_Hash.put("tNormalize_1", false);
				start_Hash.put("tNormalize_1", System.currentTimeMillis());

				currentComponent = "tNormalize_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tNormalize_1 = 0;

				int nb_line_tNormalize_1 = 0;
				String tmp_tNormalize_1 = null;
				StringBuilder currentRecord_tNormalize_1 = null;
				String[] normalizeRecord_tNormalize_1 = null;
				java.util.Set<String> recordSet_tNormalize_1 = new java.util.HashSet<String>();

				if (((String) "\r\n").length() == 0) {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				/**
				 * [tNormalize_1 begin ] stop
				 */

				/**
				 * [tHttpRequest_1 begin ] start
				 */

				ok_Hash.put("tHttpRequest_1", false);
				start_Hash.put("tHttpRequest_1", System.currentTimeMillis());

				currentComponent = "tHttpRequest_1";

				int tos_count_tHttpRequest_1 = 0;

				/**
				 * [tHttpRequest_1 begin ] stop
				 */

				/**
				 * [tHttpRequest_1 main ] start
				 */

				currentComponent = "tHttpRequest_1";

				int connectTimeOut_tHttpRequest_1 = Integer.valueOf(30) * 1000;
				int readTimeOut_tHttpRequest_1 = Integer.valueOf(0) * 1000;

				java.net.URL url_tHttpRequest_1 = new java.net.URL(
						"http://chaplin:8065/?name=customers_http");

				java.net.HttpURLConnection urlConn_tHttpRequest_1 = (java.net.HttpURLConnection) url_tHttpRequest_1
						.openConnection();
				urlConn_tHttpRequest_1.setRequestMethod("GET");
				urlConn_tHttpRequest_1.setDoOutput(true);
				urlConn_tHttpRequest_1.setDoInput(true);
				urlConn_tHttpRequest_1.setUseCaches(false);

				boolean connected_tHttpRequest_1 = false;
				int responseCode_tHttpRequest_1 = 0;
				globalMap.put("tHttpRequest_1_CONNECTED", false);
				try {
					urlConn_tHttpRequest_1.connect();
					connected_tHttpRequest_1 = true;
					globalMap.put("tHttpRequest_1_CONNECTED", true);

					byte[] buffer_tHttpRequest_1 = new byte[1024];
					int bos_buffer_tHttpRequest_1 = 0;
					StringBuilder sb_tHttpRequest_1 = new StringBuilder();

					responseCode_tHttpRequest_1 = urlConn_tHttpRequest_1
							.getResponseCode();
					globalMap.put("tHttpRequest_1_RESPONSE_CODE",
							responseCode_tHttpRequest_1);

					if (java.net.HttpURLConnection.HTTP_OK == responseCode_tHttpRequest_1) {
						java.io.InputStream bis_tHttpRequest_1 = new java.io.BufferedInputStream(
								urlConn_tHttpRequest_1.getInputStream());
						while ((bos_buffer_tHttpRequest_1 = bis_tHttpRequest_1
								.read(buffer_tHttpRequest_1)) != -1) {
							sb_tHttpRequest_1.append(new String(
									buffer_tHttpRequest_1, 0,
									bos_buffer_tHttpRequest_1));
						}
						bis_tHttpRequest_1.close();
					} else {
						String responseMessage_tHttpRequest_1 = urlConn_tHttpRequest_1
								.getResponseMessage();

						// get details response information which will be used
						// when error appear
						java.io.InputStream err_stream_tHttpRequest_1 = urlConn_tHttpRequest_1
								.getErrorStream();
						if (err_stream_tHttpRequest_1 != null) {
							java.io.InputStream es_tHttpRequest_1 = new java.io.BufferedInputStream(
									err_stream_tHttpRequest_1);
							java.io.ByteArrayOutputStream baos_tHttpRequest_1 = new java.io.ByteArrayOutputStream();

							byte[] buf_tHttpRequest_1 = new byte[1024];
							int read_tHttpRequest_1 = -1;
							try {
								while ((read_tHttpRequest_1 = es_tHttpRequest_1
										.read(buf_tHttpRequest_1)) > 0) {
									baos_tHttpRequest_1.write(
											buf_tHttpRequest_1, 0,
											read_tHttpRequest_1);
								}
							} finally {
								es_tHttpRequest_1.close();
							}

							responseMessage_tHttpRequest_1 += ("\n" + new String(
									baos_tHttpRequest_1.toByteArray()));
						}

						System.err.println(responseCode_tHttpRequest_1 + " "
								+ responseMessage_tHttpRequest_1);
						globalMap.put("tHttpRequest_1" + "_ERROR_MESSAGE",
								"Request failed:" + responseCode_tHttpRequest_1
										+ " " + responseMessage_tHttpRequest_1);
					}

					row1.ResponseContent = sb_tHttpRequest_1.toString();
					urlConn_tHttpRequest_1.disconnect();
				} catch (Exception e) {
					System.err.println(e.getMessage());
					globalMap.put("tHttpRequest_1" + "_ERROR_MESSAGE",
							e.getMessage());
				}

				tos_count_tHttpRequest_1++;

				/**
				 * [tHttpRequest_1 main ] stop
				 */

				/**
				 * [tHttpRequest_1 process_data_begin ] start
				 */

				currentComponent = "tHttpRequest_1";

				/**
				 * [tHttpRequest_1 process_data_begin ] stop
				 */

				/**
				 * [tNormalize_1 main ] start
				 */

				currentComponent = "tNormalize_1";

				// row1
				// row1

				if (execStat) {
					runStat.updateStatOnConnection("row1" + iterateId, 1, 1);
				}

				normalizeRecord_tNormalize_1 = new String[1];
				if (row1.ResponseContent != null) {
					if ("".equals(row1.ResponseContent)) {
						normalizeRecord_tNormalize_1[0] = "";
					} else {

						normalizeRecord_tNormalize_1 = row1.ResponseContent
								.split("\r\n", -1);

					}
				}
				int lastNoEmptyIndex_tNormalize_1 = normalizeRecord_tNormalize_1.length;

				for (int i_tNormalize_1 = 0; i_tNormalize_1 < lastNoEmptyIndex_tNormalize_1; i_tNormalize_1++) {

					currentRecord_tNormalize_1 = new StringBuilder();
					nb_line_tNormalize_1++;

					row2.ResponseContent = normalizeRecord_tNormalize_1[i_tNormalize_1];

					tos_count_tNormalize_1++;

					/**
					 * [tNormalize_1 main ] stop
					 */

					/**
					 * [tNormalize_1 process_data_begin ] start
					 */

					currentComponent = "tNormalize_1";

					/**
					 * [tNormalize_1 process_data_begin ] stop
					 */

					/**
					 * [tExtractRegexFields_1 main ] start
					 */

					currentComponent = "tExtractRegexFields_1";

					// row2
					// row2

					if (execStat) {
						runStat.updateStatOnConnection("row2" + iterateId, 1, 1);
					}

					row21 = null;
					if (row2.ResponseContent != null) {// C_01
						java.util.regex.Matcher matcher_tExtractRegexFields_1 = pattern_tExtractRegexFields_1
								.matcher(row2.ResponseContent);

						int groupCount_tExtractRegexFields_1 = matcher_tExtractRegexFields_1
								.groupCount();
						while (matcher_tExtractRegexFields_1.find()) {
							currentComponent = "tExtractRegexFields_1";

							try {
								row21 = new row21Struct();

								String temp_tExtractRegexFields_1 = null;
								row21.SAP_Client_MANDT = groupCount_tExtractRegexFields_1 <= 0 ? ""
										: matcher_tExtractRegexFields_1
												.group(1);
								row21.Customer_KUNNR = groupCount_tExtractRegexFields_1 <= 1 ? ""
										: matcher_tExtractRegexFields_1
												.group(2);
								row21.Country_Customer_LAND1 = groupCount_tExtractRegexFields_1 <= 2 ? ""
										: matcher_tExtractRegexFields_1
												.group(3);
								row21.Country_Name_NAME1 = groupCount_tExtractRegexFields_1 <= 3 ? ""
										: matcher_tExtractRegexFields_1
												.group(4);
								row21.City_Customer_ORT01 = groupCount_tExtractRegexFields_1 <= 4 ? ""
										: matcher_tExtractRegexFields_1
												.group(5);
								row21.Region_Customer_REGIO = groupCount_tExtractRegexFields_1 <= 5 ? ""
										: matcher_tExtractRegexFields_1
												.group(6);
								row21.Account_Group_Customer_KTOKD = groupCount_tExtractRegexFields_1 <= 6 ? ""
										: matcher_tExtractRegexFields_1
												.group(7);
							} catch (java.lang.Exception ex_tExtractRegexFields_1) {
								throw (ex_tExtractRegexFields_1);
							}

							tos_count_tExtractRegexFields_1++;

							/**
							 * [tExtractRegexFields_1 main ] stop
							 */

							/**
							 * [tExtractRegexFields_1 process_data_begin ] start
							 */

							currentComponent = "tExtractRegexFields_1";

							/**
							 * [tExtractRegexFields_1 process_data_begin ] stop
							 */
							// Start of branch "row21"
							if (row21 != null) {

								/**
								 * [tDBOutput_1 main ] start
								 */

								currentComponent = "tDBOutput_1";

								// row21
								// row21

								if (execStat) {
									runStat.updateStatOnConnection("row21"
											+ iterateId, 1, 1);
								}

								whetherReject_tDBOutput_1 = false;
								if (row21.SAP_Client_MANDT == null) {
									pstmt_tDBOutput_1.setNull(1,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(1,
											row21.SAP_Client_MANDT);
								}

								if (row21.Customer_KUNNR == null) {
									pstmt_tDBOutput_1.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(2,
											row21.Customer_KUNNR);
								}

								if (row21.Country_Customer_LAND1 == null) {
									pstmt_tDBOutput_1.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(3,
											row21.Country_Customer_LAND1);
								}

								if (row21.Country_Name_NAME1 == null) {
									pstmt_tDBOutput_1.setNull(4,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(4,
											row21.Country_Name_NAME1);
								}

								if (row21.City_Customer_ORT01 == null) {
									pstmt_tDBOutput_1.setNull(5,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(5,
											row21.City_Customer_ORT01);
								}

								if (row21.Region_Customer_REGIO == null) {
									pstmt_tDBOutput_1.setNull(6,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(6,
											row21.Region_Customer_REGIO);
								}

								if (row21.Account_Group_Customer_KTOKD == null) {
									pstmt_tDBOutput_1.setNull(7,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(7,
											row21.Account_Group_Customer_KTOKD);
								}

								pstmt_tDBOutput_1.addBatch();
								nb_line_tDBOutput_1++;

								batchSizeCounter_tDBOutput_1++;

								if (!whetherReject_tDBOutput_1) {
								}
								// ////////batch execute by batch size///////
								class LimitBytesHelper_tDBOutput_1 {
									public int limitBytePart1(
											int counter,
											java.sql.PreparedStatement pstmt_tDBOutput_1)
											throws Exception {
										try {

											for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
													.executeBatch()) {
												if (countEach_tDBOutput_1 == -2
														|| countEach_tDBOutput_1 == -3) {
													break;
												}
												counter += countEach_tDBOutput_1;
											}

										} catch (java.sql.BatchUpdateException e) {

											int countSum_tDBOutput_1 = 0;
											for (int countEach_tDBOutput_1 : e
													.getUpdateCounts()) {
												counter += (countEach_tDBOutput_1 < 0 ? 0
														: countEach_tDBOutput_1);
											}

											System.err.println(e.getMessage());

										}
										return counter;
									}

									public int limitBytePart2(
											int counter,
											java.sql.PreparedStatement pstmt_tDBOutput_1)
											throws Exception {
										try {

											for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
													.executeBatch()) {
												if (countEach_tDBOutput_1 == -2
														|| countEach_tDBOutput_1 == -3) {
													break;
												}
												counter += countEach_tDBOutput_1;
											}

										} catch (java.sql.BatchUpdateException e) {

											for (int countEach_tDBOutput_1 : e
													.getUpdateCounts()) {
												counter += (countEach_tDBOutput_1 < 0 ? 0
														: countEach_tDBOutput_1);
											}

											System.err.println(e.getMessage());

										}
										return counter;
									}
								}
								if ((batchSize_tDBOutput_1 > 0)
										&& (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {

									insertedCount_tDBOutput_1 = new LimitBytesHelper_tDBOutput_1()
											.limitBytePart1(
													insertedCount_tDBOutput_1,
													pstmt_tDBOutput_1);

									batchSizeCounter_tDBOutput_1 = 0;
								}

								// //////////commit every////////////

								commitCounter_tDBOutput_1++;
								if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
									if ((batchSize_tDBOutput_1 > 0)
											&& (batchSizeCounter_tDBOutput_1 > 0)) {

										insertedCount_tDBOutput_1 = new LimitBytesHelper_tDBOutput_1()
												.limitBytePart1(
														insertedCount_tDBOutput_1,
														pstmt_tDBOutput_1);

										batchSizeCounter_tDBOutput_1 = 0;
									}

									conn_tDBOutput_1.commit();

									commitCounter_tDBOutput_1 = 0;
								}

								tos_count_tDBOutput_1++;

								/**
								 * [tDBOutput_1 main ] stop
								 */

								/**
								 * [tDBOutput_1 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_1 process_data_end ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_end ] stop
								 */

							} // End of branch "row21"

							// end for
						}

					} // C_01

					/**
					 * [tExtractRegexFields_1 process_data_end ] start
					 */

					currentComponent = "tExtractRegexFields_1";

					/**
					 * [tExtractRegexFields_1 process_data_end ] stop
					 */
					// end for
				}

				/**
				 * [tNormalize_1 process_data_end ] start
				 */

				currentComponent = "tNormalize_1";

				/**
				 * [tNormalize_1 process_data_end ] stop
				 */

				/**
				 * [tHttpRequest_1 process_data_end ] start
				 */

				currentComponent = "tHttpRequest_1";

				/**
				 * [tHttpRequest_1 process_data_end ] stop
				 */

				/**
				 * [tHttpRequest_1 end ] start
				 */

				currentComponent = "tHttpRequest_1";

				ok_Hash.put("tHttpRequest_1", true);
				end_Hash.put("tHttpRequest_1", System.currentTimeMillis());

				/**
				 * [tHttpRequest_1 end ] stop
				 */

				/**
				 * [tNormalize_1 end ] start
				 */

				currentComponent = "tNormalize_1";

				globalMap.put("tNormalize_1_NB_LINE", nb_line_tNormalize_1);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tNormalize_1", true);
				end_Hash.put("tNormalize_1", System.currentTimeMillis());

				/**
				 * [tNormalize_1 end ] stop
				 */

				/**
				 * [tExtractRegexFields_1 end ] start
				 */

				currentComponent = "tExtractRegexFields_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tExtractRegexFields_1", true);
				end_Hash.put("tExtractRegexFields_1",
						System.currentTimeMillis());

				/**
				 * [tExtractRegexFields_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					int countSum_tDBOutput_1 = 0;
					if (pstmt_tDBOutput_1 != null
							&& batchSizeCounter_tDBOutput_1 > 0) {

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
								.executeBatch()) {
							if (countEach_tDBOutput_1 == -2
									|| countEach_tDBOutput_1 == -3) {
								break;
							}
							countSum_tDBOutput_1 += countEach_tDBOutput_1;
						}

					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
								: countEach_tDBOutput_1);
					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					System.err.println(e.getMessage());

				}
				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");

				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				conn_tDBOutput_1.commit();

				conn_tDBOutput_1.close();
				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1
						+ deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1
						+ updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1
						+ insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1
						+ rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row21" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tJava_2Process(globalMap);

				/**
				 * [tDBOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHttpRequest_1 finally ] start
				 */

				currentComponent = "tHttpRequest_1";

				/**
				 * [tHttpRequest_1 finally ] stop
				 */

				/**
				 * [tNormalize_1 finally ] start
				 */

				currentComponent = "tNormalize_1";

				/**
				 * [tNormalize_1 finally ] stop
				 */

				/**
				 * [tExtractRegexFields_1 finally ] start
				 */

				currentComponent = "tExtractRegexFields_1";

				/**
				 * [tExtractRegexFields_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHttpRequest_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());

				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				System.out.println("Nr. of processed Rows:"
						+ ((Integer) globalMap.get("tDBOutput_1_NB_LINE")));
				System.out.println("Nr. of inserted Rows:"
						+ ((Integer) globalMap
								.get("tDBOutput_1_NB_LINE_INSERTED")));

				/**
				 * [tJava_2 begin ] stop
				 */

				/**
				 * [tJava_2 main ] start
				 */

				currentComponent = "tJava_2";

				tos_count_tJava_2++;

				/**
				 * [tJava_2 main ] stop
				 */

				/**
				 * [tJava_2 process_data_begin ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 process_data_begin ] stop
				 */

				/**
				 * [tJava_2 process_data_end ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 process_data_end ] stop
				 */

				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				/**
				 * [tJava_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_2 finally ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final get_sapdata_via_http_regex get_sapdata_via_http_regexClass = new get_sapdata_via_http_regex();

		int exitCode = get_sapdata_via_http_regexClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = get_sapdata_via_http_regex.class
					.getClassLoader().getResourceAsStream(
							"test_customers/get_sapdata_via_http_regex_0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = get_sapdata_via_http_regex.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tHttpRequest_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tHttpRequest_1) {
			globalMap.put("tHttpRequest_1_SUBPROCESS_STATE", -1);

			e_tHttpRequest_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : get_sapdata_via_http_regex");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 64583 characters generated by Talend Open Studio for Data Integration on the
 * April 1, 2019 2:15:19 PM CEST
 ************************************************************************************************/
